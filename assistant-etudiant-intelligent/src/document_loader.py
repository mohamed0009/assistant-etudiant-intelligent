"""
Module de chargement des documents pour l'assistant √©tudiant intelligent.
G√®re le chargement des fichiers PDF et Word.
"""

import os
from typing import List, Dict, Any
from pathlib import Path

from langchain_community.document_loaders import (
    PyPDFLoader,
    Docx2txtLoader,
    DirectoryLoader
)
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema import Document


class DocumentLoader:
    """Classe pour charger et traiter les documents d'√©tude."""
    
    def __init__(self, data_dir: str = "data"):
        """
        Initialise le chargeur de documents.
        
        Args:
            data_dir: R√©pertoire contenant les documents
        """
        self.data_dir = Path(data_dir)
        self.text_splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len,
            separators=["\n\n", "\n", " ", ""]
        )
    
    def load_documents(self) -> List[Document]:
        """
        Charge tous les documents du r√©pertoire data.
        
        Returns:
            Liste des documents charg√©s et segment√©s
        """
        documents = []
        
        if not self.data_dir.exists():
            print(f"‚ö†Ô∏è  Le r√©pertoire {self.data_dir} n'existe pas.")
            print("üìÅ Cr√©ez le r√©pertoire et ajoutez vos documents PDF/Word.")
            return documents
        
        # Charger les fichiers PDF
        pdf_files = list(self.data_dir.glob("*.pdf"))
        for pdf_file in pdf_files:
            try:
                print(f"üìÑ Chargement de {pdf_file.name}...")
                loader = PyPDFLoader(str(pdf_file))
                pdf_docs = loader.load()
                
                # Ajouter des m√©tadonn√©es
                for doc in pdf_docs:
                    doc.metadata.update({
                        "source": pdf_file.name,
                        "file_type": "pdf",
                        "subject": self._extract_subject_from_filename(pdf_file.name)
                    })
                
                documents.extend(pdf_docs)
                print(f"‚úÖ {pdf_file.name} charg√© ({len(pdf_docs)} pages)")
                
            except Exception as e:
                print(f"‚ùå Erreur lors du chargement de {pdf_file.name}: {e}")
        
        # Charger les fichiers Word
        docx_files = list(self.data_dir.glob("*.docx")) + list(self.data_dir.glob("*.doc"))
        for docx_file in docx_files:
            try:
                print(f"üìÑ Chargement de {docx_file.name}...")
                loader = Docx2txtLoader(str(docx_file))
                docx_docs = loader.load()
                
                # Ajouter des m√©tadonn√©es
                for doc in docx_docs:
                    doc.metadata.update({
                        "source": docx_file.name,
                        "file_type": "word",
                        "subject": self._extract_subject_from_filename(docx_file.name)
                    })
                
                documents.extend(docx_docs)
                print(f"‚úÖ {docx_file.name} charg√©")
                
            except Exception as e:
                print(f"‚ùå Erreur lors du chargement de {docx_file.name}: {e}")
        
        # Charger les fichiers texte
        txt_files = list(self.data_dir.glob("*.txt"))
        for txt_file in txt_files:
            try:
                print(f"üìÑ Chargement de {txt_file.name}...")
                with open(txt_file, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Cr√©er un document LangChain
                doc = Document(
                    page_content=content,
                    metadata={
                        "source": txt_file.name,
                        "file_type": "text",
                        "subject": self._extract_subject_from_filename(txt_file.name)
                    }
                )
                
                documents.append(doc)
                print(f"‚úÖ {txt_file.name} charg√©")
                
            except Exception as e:
                print(f"‚ùå Erreur lors du chargement de {txt_file.name}: {e}")
        
        if not documents:
            print("‚ö†Ô∏è  Aucun document trouv√© dans le r√©pertoire data/")
            print("üìã Ajoutez vos cours, TD et examens corrig√©s au format PDF, Word ou texte")
        
        return documents
    
    def split_documents(self, documents: List[Document]) -> List[Document]:
        """
        Segmente les documents en chunks plus petits.
        
        Args:
            documents: Liste des documents √† segmenter
            
        Returns:
            Liste des chunks de documents
        """
        if not documents:
            return []
        
        print(f"‚úÇÔ∏è  Segmentation de {len(documents)} documents...")
        chunks = self.text_splitter.split_documents(documents)
        print(f"‚úÖ {len(chunks)} chunks cr√©√©s")
        
        return chunks
    
    def _extract_subject_from_filename(self, filename: str) -> str:
        """
        Extrait le sujet/mati√®re du nom de fichier.
        
        Args:
            filename: Nom du fichier
            
        Returns:
            Sujet extrait ou "G√©n√©ral"
        """
        filename_lower = filename.lower()
        
        # Mapping des mots-cl√©s vers les mati√®res
        subject_keywords = {
            "√©lectricit√©": "√âlectricit√©",
            "electronique": "√âlectronique",
            "electronique": "√âlectronique",
            "physique": "Physique",
            "math": "Math√©matiques",
            "mathematiques": "Math√©matiques",
            "cours": "Cours",
            "td": "Travaux Dirig√©s",
            "tp": "Travaux Pratiques",
            "examen": "Examen",
            "corrige": "Corrig√©",
            "correction": "Corrig√©"
        }
        
        for keyword, subject in subject_keywords.items():
            if keyword in filename_lower:
                return subject
        
        return "G√©n√©ral"
    
    def get_document_stats(self, documents: List[Document]) -> Dict[str, Any]:
        """
        G√©n√®re des statistiques sur les documents charg√©s.
        
        Args:
            documents: Liste des documents
            
        Returns:
            Dictionnaire contenant les statistiques
        """
        if not documents:
            return {"total_documents": 0, "subjects": {}, "file_types": {}}
        
        subjects = {}
        file_types = {}
        total_chars = 0
        
        for doc in documents:
            # Compter par sujet
            subject = doc.metadata.get("subject", "G√©n√©ral")
            subjects[subject] = subjects.get(subject, 0) + 1
            
            # Compter par type de fichier
            file_type = doc.metadata.get("file_type", "inconnu")
            file_types[file_type] = file_types.get(file_type, 0) + 1
            
            # Compter les caract√®res
            total_chars += len(doc.page_content)
        
        return {
            "total_documents": len(documents),
            "subjects": subjects,
            "file_types": file_types,
            "total_characters": total_chars,
            "average_chars_per_doc": total_chars // len(documents) if documents else 0
        }
