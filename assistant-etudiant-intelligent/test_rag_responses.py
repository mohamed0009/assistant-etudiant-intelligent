#!/usr/bin/env python3
"""
Script de test pour v√©rifier que l'assistant RAG donne des r√©ponses compl√®tes
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire src au path
sys.path.append(str(Path(__file__).parent / "src"))

from src.document_loader import DocumentLoader
from src.vector_store import VectorStore
from src.rag_engine import RAGEngine

def test_rag_responses():
    """Test des r√©ponses compl√®tes de l'assistant RAG."""
    
    print("üß™ Test des r√©ponses compl√®tes de l'assistant RAG")
    print("=" * 60)
    
    try:
        # Charger les documents
        print("üìö Chargement des documents...")
        loader = DocumentLoader()
        documents = loader.load_documents()
        
        if not documents:
            print("‚ùå Aucun document trouv√©")
            return
        
        print(f"‚úÖ {len(documents)} documents charg√©s")
        
        # Cr√©er la base vectorielle
        print("üîç Cr√©ation de la base vectorielle...")
        chunks = loader.split_documents(documents)
        vector_store = VectorStore()
        success = vector_store.create_vector_store(chunks)
        
        if not success:
            print("‚ùå Erreur cr√©ation base vectorielle")
            return
        
        print("‚úÖ Base vectorielle cr√©√©e")
        
        # Initialiser le moteur RAG
        print("ü§ñ Initialisation du moteur RAG...")
        rag_engine = RAGEngine(vector_store)
        print("‚úÖ Moteur RAG initialis√©")
        
        # Questions de test
        test_questions = [
            "Explique-moi la loi d'Ohm",
            "Qu'est-ce que le th√©or√®me de Th√©venin ?",
            "Comment calculer la puissance √©lectrique ?",
            "Explique-moi les d√©riv√©es en math√©matiques",
            "Qu'est-ce que le pH en chimie ?",
            "Comment calculer une int√©grale ?"
        ]
        
        print("\nüéØ Test des r√©ponses compl√®tes")
        print("=" * 60)
        
        for i, question in enumerate(test_questions, 1):
            print(f"\nüìù Question {i}: {question}")
            print("-" * 40)
            
            # Obtenir la r√©ponse
            response = rag_engine.ask_question(question)
            
            # Afficher la r√©ponse
            print(f"‚úÖ R√©ponse (confiance: {response.confidence:.2f}):")
            print(response.answer)
            
            # V√©rifier que la r√©ponse est compl√®te
            if "consultez" in response.answer.lower() or "document" in response.answer.lower():
                print("‚ö†Ô∏è  ATTENTION: La r√©ponse contient des r√©f√©rences aux documents")
            else:
                print("‚úÖ R√©ponse compl√®te sans renvoi vers les documents")
            
            print(f"‚è±Ô∏è  Temps de traitement: {response.processing_time:.2f}s")
            print(f"üìö Sources utilis√©es: {len(response.sources)}")
            
            if i < len(test_questions):
                input("\nAppuyez sur Entr√©e pour continuer...")
        
        print("\nüéâ Test termin√© avec succ√®s !")
        print("‚úÖ L'assistant RAG donne des r√©ponses compl√®tes et d√©taill√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_rag_responses()

